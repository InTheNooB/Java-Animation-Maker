package app;

import app.wrk.animation.Animation;
import app.wrk.animation.AnimationSet;
import com.bulenkov.darcula.DarculaLaf;
import java.awt.Color;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.plaf.basic.BasicLookAndFeel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author dingl01
 */
public class Ihm extends javax.swing.JFrame implements Constants {

    private DefaultTableModel dtm;
    private boolean previewing;
    private AnimationSet animationSet;
    private Thread thread;
    private PreviewRenderer previewRenderer;
    private CellRenderer cellRenderer;

    /**
     * Creates new form Ihm
     */
    public Ihm() {
        try {
            BasicLookAndFeel darcula = new DarculaLaf();
            UIManager.setLookAndFeel(darcula);
        } catch (Exception ex) {
            Logger.getLogger(Ihm.class.getName()).log(Level.SEVERE, null, ex);
        }
        initComponents();
        this.setVisible(true);
        previewing = false;
        animationSet = new AnimationSet();
        previewRenderer = new PreviewRenderer(this);
        thread = new Thread(previewRenderer);
        thread.start();
        initTable();

    }

    public void initTable() {
        dtm = new DefaultTableModel() {

            @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false
                return false;
            }
        };

        cellRenderer = new CellRenderer();
        dtm.setColumnCount(0);
        dtm.setRowCount(0);
        table.setSelectionBackground(Color.red);

        dtm.setColumnIdentifiers(new Integer[]{});
        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        table.setRowHeight(CELL_HEIGHT);
        table.setModel(dtm);
        updateTableRendering();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        startPreview = new javax.swing.JButton();
        stopPreview = new javax.swing.JButton();
        update = new javax.swing.JButton();
        addSprite = new javax.swing.JButton();
        addColumn = new javax.swing.JButton();
        addRow = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        preview = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        categorieCooldown = new javax.swing.JTextField();
        switching = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        spriteCooldown = new javax.swing.JTextField();
        remove = new javax.swing.JButton();
        exportAnimation = new javax.swing.JButton();
        importAnimation = new javax.swing.JButton();
        filePath = new javax.swing.JTextField();
        exportAllAnimation = new javax.swing.JButton();
        categorieName = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        table.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        table.setDropMode(javax.swing.DropMode.INSERT);
        table.setShowHorizontalLines(false);
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        startPreview.setText("Start Preview");
        startPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startPreviewActionPerformed(evt);
            }
        });

        stopPreview.setText("Stop Preview");
        stopPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopPreviewActionPerformed(evt);
            }
        });

        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        addSprite.setText("+ Sprite");
        addSprite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSpriteActionPerformed(evt);
            }
        });

        addColumn.setText("+ Column");
        addColumn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addColumnActionPerformed(evt);
            }
        });

        addRow.setText("+ Row");
        addRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRowActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 1, 48)); // NOI18N
        jLabel1.setText("Animation Maker");

        preview.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        preview.setDoubleBuffered(true);
        preview.setOpaque(true);

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel2.setText("Preview");

        switching.setSelected(true);
        switching.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                switchingActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel3.setText("Categorie Cooldown");

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel4.setText("Switching");

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel5.setText("Current Sprite Cooldown");

        remove.setText("- Remove");
        remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeActionPerformed(evt);
            }
        });

        exportAnimation.setText("Export");
        exportAnimation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportAnimationActionPerformed(evt);
            }
        });

        importAnimation.setText("Import");
        importAnimation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importAnimationActionPerformed(evt);
            }
        });

        filePath.setEditable(false);

        exportAllAnimation.setText("Export All");
        exportAllAnimation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportAllAnimationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 625, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(addRow, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(addColumn)
                                    .addComponent(addSprite, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(remove, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(startPreview)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(stopPreview)
                                        .addContainerGap())
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(preview, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(15, 15, 15))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 38, Short.MAX_VALUE)
                                .addComponent(jLabel1)
                                .addGap(43, 43, 43))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(spriteCooldown, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(44, 44, 44)
                                        .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(categorieCooldown, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(switching))
                                .addContainerGap(67, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(filePath)
                                    .addComponent(categorieName))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(importAnimation, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(exportAnimation, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(exportAllAnimation, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(20, 20, 20))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(76, 76, 76))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(preview, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(addColumn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addRow)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addSprite)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(remove)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(stopPreview)
                    .addComponent(startPreview))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jLabel4))
                    .addComponent(switching, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(categorieCooldown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(spriteCooldown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(update))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(categorieName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exportAllAnimation))
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exportAnimation)
                    .addComponent(importAnimation)
                    .addComponent(filePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addSpriteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSpriteActionPerformed
        if (table.getSelectedColumn() != -1 && table.getSelectedRow() != -1) {
            if (switching.isSelected() && categorieCooldown.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Choose a categorie cooldown");
            } else {
                JFileChooser input = new JFileChooser();
                input.setMultiSelectionEnabled(true);
                input.setCurrentDirectory(new File("."));
                FileNameExtensionFilter filter = new FileNameExtensionFilter("Images", "png", "jpg", "PNG", "JPG");
                input.setFileFilter(filter);
                int result = input.showSaveDialog(this);
                if (result == JFileChooser.APPROVE_OPTION) {
                    File[] files;
                    files = input.getSelectedFiles();
                    for (int i = 0; i < files.length; i++) {
                        addSprite(files[i], i);
                    }
                } else if (result == JFileChooser.CANCEL_OPTION) {
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Add/Select a Row/Column");
        }
    }//GEN-LAST:event_addSpriteActionPerformed

    private void addRow() {

        previewing = false;
        dtm.addRow(new Object[]{});
        updateTableRendering();
    }

    private int addColumn(String name) {
        if (name.equals("")) {
            name = JOptionPane.showInputDialog("Choose a name", null);
        }
        previewing = false;
        // Set values
        int column = dtm.getColumnCount();

        // Create the categorie
        if (switching.isSelected()) {
            float newCooldown = !categorieCooldown.getText().isEmpty() ? Float.parseFloat(categorieCooldown.getText()) : 1;
            animationSet.addCategorie(newCooldown, column);
        } else {
            animationSet.addCategorie(column);
        }
        animationSet.getAnimation(column).setName(name);
        // Creates and adds the column into the table
        String[] indentifiers = new String[column + 1];
        for (int i = 0; i < column + 1; i++) {
            indentifiers[i] = animationSet.getAnimation(i).getName() + " - " + i;
        }
        dtm.addColumn(new Object[]{});

        dtm.setColumnIdentifiers(indentifiers);
        updateTableRendering();

        return column;
    }

    private void addSprite(File selectedFile, int fileID) {
        try {
            // Set values
            int column = table.getSelectedColumn();
            int row = table.getSelectedRow() + fileID;
            String filePath = selectedFile.getAbsolutePath().replace(System.getProperty("user.dir"), "");
            filePath = filePath.substring(1);
            if (table.getRowCount() <= row) {
                addRow();
            }
            float cooldown = -1;
            if (!categorieCooldown.getText().isEmpty()) {
                if (spriteCooldown.getText().isEmpty()) {
                    cooldown = Float.parseFloat(categorieCooldown.getText());
                } else {
                    cooldown = Float.parseFloat(spriteCooldown.getText());
                }
            }

            // Process image
            ImageIcon icon = new ImageIcon(ImageIO.read(selectedFile));
            Image imageIc = icon.getImage().getScaledInstance(CELL_WIDTH, CELL_HEIGHT, Image.SCALE_SMOOTH);

            DefaultTableModel tModel = (DefaultTableModel) table.getModel();

            // Set value
            tModel.setValueAt(new ImageIcon(imageIc), row, column);

            // Create categorie 
            if (dtm.getColumnCount() - 1 == 0 && !animationSet.categorieExist(0)) {
                if (switching.isSelected()) {
                    animationSet.addCategorie(cooldown, 0);
                } else {
                    animationSet.addCategorie(0);
                }
            }

            // Adds sprite
            if (switching.isSelected()) {
                animationSet.addSprite(selectedFile, column, cooldown, row, filePath);
            } else {
                animationSet.addSprite(selectedFile, column, row, filePath);
            }
            updateTableRendering();

        } catch (IOException ex) {
            Logger.getLogger(Ihm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void addColumnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addColumnActionPerformed
        addColumn("");
    }//GEN-LAST:event_addColumnActionPerformed

    private void stopPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopPreviewActionPerformed
        previewing = false;
    }//GEN-LAST:event_stopPreviewActionPerformed

    private void startPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startPreviewActionPerformed
        previewing = canPreview();
    }//GEN-LAST:event_startPreviewActionPerformed

    private void addRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRowActionPerformed
        addRow();
    }//GEN-LAST:event_addRowActionPerformed

    private void tableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            removeSprite();
        }
    }//GEN-LAST:event_tableKeyPressed

    private void switchingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switchingActionPerformed
        updateSwitchingInfos();
    }//GEN-LAST:event_switchingActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        int column = table.getSelectedColumn();
        int row = table.getSelectedRow();
        if (column == -1 || row == -1) {
            JOptionPane.showMessageDialog(this, "Choose a cell");
        } else {
            boolean switching = this.switching.isSelected();
            float cooldown = -1;
            if (switching) {
                if (!spriteCooldown.getText().isEmpty()) {
                    if (animationSet.getCooldown(column, row) != Float.parseFloat(spriteCooldown.getText())) {
                        cooldown = Float.parseFloat(spriteCooldown.getText());
                        animationSet.spriteUpdate(column, row, cooldown);
                    } else {
                        cooldown = Float.parseFloat(categorieCooldown.getText());
                        animationSet.categorieUpdate(column, cooldown);
                    }
                } else {
                    cooldown = Float.parseFloat(categorieCooldown.getText());
                    animationSet.spriteUpdate(column, row, cooldown);
                }
            } else {
                animationSet.categorieUpdate(column, false);
            }
            if (!categorieName.getText().isEmpty()) {
                animationSet.getAnimation(column).setName(categorieName.getText());
            }
            updateTableRendering();
            updateSwitchingInfos();
        }
    }//GEN-LAST:event_updateActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        if (table.getSelectedColumn() < animationSet.getCategoriesAmount()) {
            updateSpriteInfos();
        }
    }//GEN-LAST:event_tableMouseClicked

    private void removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeActionPerformed
        removeSprite();
    }//GEN-LAST:event_removeActionPerformed

    private void exportAnimationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportAnimationActionPerformed
        exportAnimation(table.getSelectedColumn());
    }//GEN-LAST:event_exportAnimationActionPerformed

    private void exportAnimation(int categorie) {
        File file = new File("assets/animations/" + animationSet.getAnimation(categorie).getName() + "." + ANIMATION_EXTENSION);
        ObjectOutputStream oos;
        try {
            oos = new ObjectOutputStream(new FileOutputStream(file));
            oos.writeObject(animationSet.getAnimation(categorie));
            oos.close();

            JOptionPane.showMessageDialog(this, "Animation Saved");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error While Exporting");
        }
    }

    private void exportAllAnimation() {
        int categorie;
        try {
            for (Animation a : animationSet.getAnimations()) {
                categorie = a.getCategorie();
                File file = new File("assets/animations/" + animationSet.getAnimation(categorie).getName() + "." + ANIMATION_EXTENSION);
                ObjectOutputStream oos;
                oos = new ObjectOutputStream(new FileOutputStream(file));
                oos.writeObject(animationSet.getAnimation(categorie));
                oos.close();

            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error While Exporting");
        }

        JOptionPane.showMessageDialog(this, animationSet.getCategoriesAmount() + " Animation(s) Saved");
    }
    private void importAnimationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importAnimationActionPerformed
        JFileChooser input = new JFileChooser();
        input.setCurrentDirectory(new File("."));
        input.setMultiSelectionEnabled(true);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Animation Files (." + ANIMATION_EXTENSION + ")", ANIMATION_EXTENSION);
        input.setFileFilter(filter);
        int result = input.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            for (int i = 0; i < input.getSelectedFiles().length; i++) {
                importAnimation(input.getSelectedFiles()[i]);
            }
        }
    }//GEN-LAST:event_importAnimationActionPerformed

    private void exportAllAnimationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportAllAnimationActionPerformed
        exportAllAnimation();
    }//GEN-LAST:event_exportAllAnimationActionPerformed

    private void importAnimation(File file) {
        ObjectInputStream in = null;
        Animation importedAnimation = null;
        try {
            // Deserialization
            // Reading the object from a file
            in = new ObjectInputStream(new FileInputStream(file));

            // Method for deserialization of object 
            importedAnimation = (Animation) in.readObject();

            in.close();

            int column = addColumn(importedAnimation.getName());
            importedAnimation.setCategorie(column);

            importedAnimation.addSprites();
            animationSet.fillCategorie(importedAnimation);
            // Process image
            for (int i = 0; i < importedAnimation.getSprites().size(); i++) {
                if (table.getRowCount() <= i) {
                    addRow();
                }
                ImageIcon icon = new ImageIcon(importedAnimation.getSprites().get(i).getSprite());
                Image imageIc = icon.getImage().getScaledInstance(CELL_WIDTH, CELL_HEIGHT, Image.SCALE_SMOOTH);
                DefaultTableModel tModel = (DefaultTableModel) table.getModel();
                tModel.setValueAt(new ImageIcon(imageIc), i, column);
            }
        } catch (Exception ex) {
            Logger.getLogger(Ihm.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void removeSprite() {
        previewing = false;
        try {
            Thread.sleep((long) 0.2);
        } catch (Exception e) {

        }
        if (table.getSelectedRow() != -1 && table.getSelectedColumn() != -1) {
            dtm.setValueAt(null, table.getSelectedRow(), table.getSelectedColumn());
            animationSet.removeSprite(table.getSelectedColumn(), table.getSelectedRow());
        }

    }

    public boolean canPreview() {
        return !animationSet.isEmpty(table.getSelectedColumn());
    }

    private void updateTableRendering() {
        for (int i = 0; i < dtm.getColumnCount(); i++) {
            table.getColumnModel().getColumn(i).setCellRenderer(cellRenderer);
            TableColumnModel tcm = table.getColumnModel();
            tcm.getColumn(i).setPreferredWidth(CELL_WIDTH);
        }
    }

    private void updateSwitchingInfos() {
        if (!animationSet.isEmpty()) {
            if (switching.isSelected()) {
                categorieCooldown.setText("" + animationSet.getCooldown(table.getSelectedColumn()));
                categorieCooldown.setEnabled(true);
                categorieCooldown.setFocusable(true);
                if (animationSet.getCooldown(table.getSelectedColumn(), table.getSelectedRow()) == -1) {
                    spriteCooldown.setText("" + animationSet.getCooldown(table.getSelectedColumn()));
                } else {
                    spriteCooldown.setText("" + animationSet.getCooldown(table.getSelectedColumn(), table.getSelectedRow()));
                }
                spriteCooldown.setEnabled(true);
                spriteCooldown.setFocusable(true);
            } else {
                categorieCooldown.setText("");
                categorieCooldown.setEnabled(false);
                categorieCooldown.setFocusable(false);
                spriteCooldown.setText("");
                spriteCooldown.setEnabled(false);
                spriteCooldown.setFocusable(false);
            }
        } else {
            if (switching.isSelected()) {
                categorieCooldown.setEnabled(true);
                categorieCooldown.setFocusable(true);
                spriteCooldown.setEnabled(true);
                spriteCooldown.setFocusable(true);
            } else {
                categorieCooldown.setText("");
                categorieCooldown.setEnabled(false);
                categorieCooldown.setFocusable(false);
                spriteCooldown.setText("");
                spriteCooldown.setEnabled(false);
                spriteCooldown.setFocusable(false);
            }
        }
    }

    private void updateSpriteInfos() {
        if (!animationSet.isEmpty()) {
            switching.setSelected(animationSet.isSwitching(table.getSelectedColumn()));
            if (switching.isSelected()) {
                categorieCooldown.setText("" + animationSet.getCooldown(table.getSelectedColumn()));
                categorieCooldown.setEnabled(true);
                categorieCooldown.setFocusable(true);

                spriteCooldown.setText("" + animationSet.getCooldown(table.getSelectedColumn(), table.getSelectedRow()));
                spriteCooldown.setEnabled(true);
                spriteCooldown.setFocusable(true);
            } else {
                categorieCooldown.setText("");
                categorieCooldown.setEnabled(false);
                categorieCooldown.setFocusable(false);
                spriteCooldown.setText("");
                spriteCooldown.setEnabled(false);
                spriteCooldown.setFocusable(false);
            }
            categorieName.setText(animationSet.getAnimation(table.getSelectedColumn()).getName());
            try {
                filePath.setText(animationSet.getAnimation(table.getSelectedColumn()).getSprites().get(table.getSelectedRow()).getSpritePath());
            } catch (Exception e) {
                filePath.setText("");
            }
        }
    }

    public Image getSelectedSprite() {
        return animationSet.getAnimation(table.getSelectedColumn()).getSprites().get(table.getSelectedRow()).getSprite();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ihm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ihm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ihm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ihm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ihm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addColumn;
    private javax.swing.JButton addRow;
    private javax.swing.JButton addSprite;
    private javax.swing.JTextField categorieCooldown;
    private javax.swing.JTextField categorieName;
    private javax.swing.JButton exportAllAnimation;
    private javax.swing.JButton exportAnimation;
    private javax.swing.JTextField filePath;
    private javax.swing.JButton importAnimation;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel preview;
    private javax.swing.JButton remove;
    private javax.swing.JTextField spriteCooldown;
    private javax.swing.JButton startPreview;
    private javax.swing.JButton stopPreview;
    private javax.swing.JRadioButton switching;
    private javax.swing.JTable table;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables

    public DefaultTableModel getDtm() {
        return dtm;
    }

    public void setDtm(DefaultTableModel dtm) {
        this.dtm = dtm;
    }

    public boolean isPreviewing() {
        return previewing;
    }

    public void setPreviewing(boolean previewing) {
        this.previewing = previewing;
    }

    public AnimationSet getAnimationSet() {
        return animationSet;
    }

    public void setAnimationSet(AnimationSet animationSet) {
        this.animationSet = animationSet;
    }

    public JButton getAddColumn() {
        return addColumn;
    }

    public void setAddColumn(JButton addColumn) {
        this.addColumn = addColumn;
    }

    public JButton getAddRow() {
        return addRow;
    }

    public void setAddRow(JButton addRow) {
        this.addRow = addRow;
    }

    public JButton getAddSprite() {
        return addSprite;
    }

    public void setAddSprite(JButton addSprite) {
        this.addSprite = addSprite;
    }

    public JLabel getjLabel1() {
        return jLabel1;
    }

    public void setjLabel1(JLabel jLabel1) {
        this.jLabel1 = jLabel1;
    }

    public JPanel getjPanel1() {
        return jPanel1;
    }

    public void setjPanel1(JPanel jPanel1) {
        this.jPanel1 = jPanel1;
    }

    public JScrollPane getjScrollPane1() {
        return jScrollPane1;
    }

    public void setjScrollPane1(JScrollPane jScrollPane1) {
        this.jScrollPane1 = jScrollPane1;
    }

    public JLabel getPreview() {
        return preview;
    }

    public void setPreview(JLabel preview) {
        this.preview = preview;
    }

    public JButton getStartPreview() {
        return startPreview;
    }

    public void setStartPreview(JButton startPreview) {
        this.startPreview = startPreview;
    }

    public JButton getStopPreview() {
        return stopPreview;
    }

    public void setStopPreview(JButton stopPreview) {
        this.stopPreview = stopPreview;
    }

    public JTable getTable() {
        return table;
    }

    public void setTable(JTable table) {
        this.table = table;
    }

    public Thread getThread() {
        return thread;
    }

    public void setThread(Thread thread) {
        this.thread = thread;
    }

    public PreviewRenderer getPreviewRenderer() {
        return previewRenderer;
    }

    public void setPreviewRenderer(PreviewRenderer previewRenderer) {
        this.previewRenderer = previewRenderer;
    }

    public JTextField getCategorieCooldown() {
        return categorieCooldown;
    }

    public void setCategorieCooldown(JTextField categorieCooldown) {
        this.categorieCooldown = categorieCooldown;
    }

    public JLabel getjLabel2() {
        return jLabel2;
    }

    public void setjLabel2(JLabel jLabel2) {
        this.jLabel2 = jLabel2;
    }

    public JLabel getjLabel3() {
        return jLabel3;
    }

    public void setjLabel3(JLabel jLabel3) {
        this.jLabel3 = jLabel3;
    }

    public JLabel getjLabel4() {
        return jLabel4;
    }

    public void setjLabel4(JLabel jLabel4) {
        this.jLabel4 = jLabel4;
    }

    public JLabel getjLabel5() {
        return jLabel5;
    }

    public void setjLabel5(JLabel jLabel5) {
        this.jLabel5 = jLabel5;
    }

    public JTextField getSpriteCooldown() {
        return spriteCooldown;
    }

    public void setSpriteCooldown(JTextField spriteCooldown) {
        this.spriteCooldown = spriteCooldown;
    }

    public JRadioButton getSwitching() {
        return switching;
    }

    public void setSwitching(JRadioButton switching) {
        this.switching = switching;
    }

    public JButton getUpdate() {
        return update;
    }

    public void setUpdate(JButton update) {
        this.update = update;
    }

}
